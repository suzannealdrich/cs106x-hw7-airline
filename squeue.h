/* * File: squeue.h * ----------------------------------------------------- * Defines an abstraction for the priority queue ADT.  This queue is not * simple FIFO queue, it is a priority queue, where elements are * retrieved in order of priority, not just by longevity in queue. * The type is exported as an "abstract data type," defined conceptually  * only by the operations on that type. Clients should not make any  * assumptions about the underlying representation. */  #ifndef _squeue_h#define _squeue_h#include "genlib.h"#define NOT_FOUND -1/* * Type: squeueADT * ---------------------- * This is the abstract type for a special queue.  The type definition * below is "incomplete".   */ typedef struct squeueCDT *squeueADT;typedef int (*cmpFnT)(void *elem1, void *elem2);typedef bool (*extractFnT)(void *elem, void *compareValue);typedef void (*mapFnT)(void *value);/* * Function: NewSpecialQueue * Usage: queue = NewSpecialQueue(); * --------------------------------- * Returns a new empty squeueADT with no elements.  The cmpFn * passed in here is used to determine priority and keep the * queue in prioritized order. */ squeueADT NewSpecialQueue(cmpFnT cmpFn);/* * Function: IsEmpty * Usage: if (IsEmpty(queue)) . . . * -------------------------- * Returns TRUE if queue has no entries. */ bool IsEmpty(squeueADT squeue);/* * Function: IsFull * Usage: if (IsFull(queue)) . . . * -------------------------- * Returns TRUE if queue has no more room for entries.   */ bool IsFull(squeueADT squeue);/* * Function: Insert * Usage: Insert(queue, data); * -------------------------- * Adds the specified object to the queue. No effort is made to * avoid duplicates.  If the queue is full, this function raises an error. * The cmpFn passed to NewSpecialQueue is used to determine how to keep * queue is prioritized order. */ void Insert(squeueADT squeue, void *newElem);/* * Function: Extract * Usage: element = Extract(queue, extractFn); * ----------------------------------- * Removes the highest priority element in the queue that passes the extract function and * returns its value.  If an element passing the test is not found or if the queue is empty,  * the queue contents are not changed and NULL is returned. */ void *Extract(squeueADT squeue, extractFnT extractFn, void *compareValue);/*  * Function: MapSpecialQueue * Usage: MapSpecialQueue(queue, fn) * -------------------------- * This function takes the supplied function and applies to each * element in the queue in the prioritized order. */void MapSpecialQueue(squeueADT squeue, mapFnT mapFn);#endif